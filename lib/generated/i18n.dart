
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.

class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
      const GeneratedLocalizationsDelegate();

  static S of(BuildContext context) =>
      Localizations.of<S>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get addCodeTooltip => "Add code from under the cap";
  String get challenges => "Challenges";
  String get close => "Close";
  String get codeAddedMsg => "Bottle added to your collection";
  String get codeUnderCap => "Code under the cap";
  String get collection => "Collection";

  String get completed => "Completed!";
  String get dailyChallenge => "Bubbles";
  String get invalidCode => "Invalid code";

  String get invalidCodeMsg =>
      "Check if you typed code from under the cap correctly.";
  String get ranking => "Ranking";

  String get requiredProducts => "Required products";
  String get sendCode => "Send code";

  String get showMore => "Show more";
}

class en extends S {
  const en();
}

class pl extends S {
  const pl();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get codeUnderCap => "Kod spod nakrętki";
  @override
  String get codeAddedMsg => "Butelka została dodana do Twojej kolekcji";
  @override
  String get challenges => "Wyzwania";
  @override
  String get sendCode => "Wyślij kod";
  @override
  String get dailyChallenge => "Wyzwanie dnia";
  @override
  String get collection => "Kolekcja";
  @override
  String get completed => "Wykonano!";
  @override
  String get invalidCode => "Nieprawidłowy kod";

  @override
  String get addCodeTooltip => "Dodaj kod spod nakrętki";

  @override
  String get invalidCodeMsg =>
      "Sprawdź czy poprawnie wpisałeś kod spod nakrętki.";

  @override
  String get showMore => "Pokaż więcej";

  @override
  String get ranking => "Ranking";
  @override
  String get close => "Zamknij";

  @override
  String get requiredProducts => "Wymagane produkty";
}


class GeneratedLocalizationsDelegate
    extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[

      const Locale("en", ""),
      const Locale("pl", ""),

    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      final Locale languageLocale = new Locale(locale.languageCode, "");
      if (supported.contains(locale))
        return locale;
      else if (supported.contains(languageLocale))
        return languageLocale;
      else {
        final Locale fallbackLocale = fallback ?? supported.first;
        return fallbackLocale;
      }
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    final String lang = getLang(locale);
    switch (lang) {
      case "en":
        return new SynchronousFuture<WidgetsLocalizations>(const en());
      case "pl":
        return new SynchronousFuture<WidgetsLocalizations>(const pl());

      default:
        return new SynchronousFuture<WidgetsLocalizations>(const S());
    }
  }

  @override
  bool isSupported(Locale locale) => supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
